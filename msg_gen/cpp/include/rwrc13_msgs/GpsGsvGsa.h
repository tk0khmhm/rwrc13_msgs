/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/rwrc13_msgs/msg/GpsGsvGsa.msg */
#ifndef RWRC13_MSGS_MESSAGE_GPSGSVGSA_H
#define RWRC13_MSGS_MESSAGE_GPSGSVGSA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace rwrc13_msgs
{
template <class ContainerAllocator>
struct GpsGsvGsa_ {
  typedef GpsGsvGsa_<ContainerAllocator> Type;

  GpsGsvGsa_()
  : header()
  , lat(0.0)
  , lon(0.0)
  , precision(0)
  , satelites(0)
  , hdop(0.0)
  , alt(0.0)
  , geo(0.0)
  , lack(0)
  , rms(0.0)
  , smd1(0.0)
  , smd2(0.0)
  , smo(0.0)
  , laed(0.0)
  , loed(0.0)
  , aled(0.0)
  , id()
  , pdop(0.0)
  , vdop(0.0)
  , gs(0.0)
  , tn(0)
  , mn(0)
  , sn()
  , elevation()
  , azimuth()
  , snr()
  , sa1()
  , sa2()
  , sa3()
  , sa4()
  , sa5()
  , sa6()
  , sa7()
  , sa8()
  {
    sa1.assign(0);
    sa2.assign(0);
    sa3.assign(0);
    sa4.assign(0);
    sa5.assign(0);
    sa6.assign(0);
    sa7.assign(0);
    sa8.assign(0);
  }

  GpsGsvGsa_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , lat(0.0)
  , lon(0.0)
  , precision(0)
  , satelites(0)
  , hdop(0.0)
  , alt(0.0)
  , geo(0.0)
  , lack(0)
  , rms(0.0)
  , smd1(0.0)
  , smd2(0.0)
  , smo(0.0)
  , laed(0.0)
  , loed(0.0)
  , aled(0.0)
  , id(_alloc)
  , pdop(0.0)
  , vdop(0.0)
  , gs(0.0)
  , tn(0)
  , mn(0)
  , sn(_alloc)
  , elevation(_alloc)
  , azimuth(_alloc)
  , snr(_alloc)
  , sa1()
  , sa2()
  , sa3()
  , sa4()
  , sa5()
  , sa6()
  , sa7()
  , sa8()
  {
    sa1.assign(0);
    sa2.assign(0);
    sa3.assign(0);
    sa4.assign(0);
    sa5.assign(0);
    sa6.assign(0);
    sa7.assign(0);
    sa8.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _lat_type;
  double lat;

  typedef double _lon_type;
  double lon;

  typedef int32_t _precision_type;
  int32_t precision;

  typedef int32_t _satelites_type;
  int32_t satelites;

  typedef float _hdop_type;
  float hdop;

  typedef double _alt_type;
  double alt;

  typedef double _geo_type;
  double geo;

  typedef int32_t _lack_type;
  int32_t lack;

  typedef float _rms_type;
  float rms;

  typedef float _smd1_type;
  float smd1;

  typedef float _smd2_type;
  float smd2;

  typedef float _smo_type;
  float smo;

  typedef float _laed_type;
  float laed;

  typedef float _loed_type;
  float loed;

  typedef float _aled_type;
  float aled;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  id;

  typedef float _pdop_type;
  float pdop;

  typedef float _vdop_type;
  float vdop;

  typedef float _gs_type;
  float gs;

  typedef int32_t _tn_type;
  int32_t tn;

  typedef int32_t _mn_type;
  int32_t mn;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sn_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  sn;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _elevation_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  elevation;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _azimuth_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  azimuth;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _snr_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  snr;

  typedef boost::array<int32_t, 4>  _sa1_type;
  boost::array<int32_t, 4>  sa1;

  typedef boost::array<int32_t, 4>  _sa2_type;
  boost::array<int32_t, 4>  sa2;

  typedef boost::array<int32_t, 4>  _sa3_type;
  boost::array<int32_t, 4>  sa3;

  typedef boost::array<int32_t, 4>  _sa4_type;
  boost::array<int32_t, 4>  sa4;

  typedef boost::array<int32_t, 4>  _sa5_type;
  boost::array<int32_t, 4>  sa5;

  typedef boost::array<int32_t, 4>  _sa6_type;
  boost::array<int32_t, 4>  sa6;

  typedef boost::array<int32_t, 4>  _sa7_type;
  boost::array<int32_t, 4>  sa7;

  typedef boost::array<int32_t, 4>  _sa8_type;
  boost::array<int32_t, 4>  sa8;


  typedef boost::shared_ptr< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator>  const> ConstPtr;
}; // struct GpsGsvGsa
typedef  ::rwrc13_msgs::GpsGsvGsa_<std::allocator<void> > GpsGsvGsa;

typedef boost::shared_ptr< ::rwrc13_msgs::GpsGsvGsa> GpsGsvGsaPtr;
typedef boost::shared_ptr< ::rwrc13_msgs::GpsGsvGsa const> GpsGsvGsaConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rwrc13_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > {
  static const char* value() 
  {
    return "24c5e8414432dbbfe7f80e780223e5dd";
  }

  static const char* value(const  ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x24c5e8414432dbbfULL;
  static const uint64_t static_value2 = 0xe7f80e780223e5ddULL;
};

template<class ContainerAllocator>
struct DataType< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rwrc13_msgs/GpsGsvGsa";
  }

  static const char* value(const  ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#GGA\n\
float64 lat	\n\
float64 lon	\n\
int32 precision	\n\
int32 satelites	#The number of Satelites\n\
float32 hdop	#Horizontal dilution of position	\n\
float64 alt 	#Altitude(Meters) above mean sea level	\n\
float64 geo	#Height of geoid (mean sea level) above WGS84 	\n\
int32 lack	#Time in seconds since last DGPS update	\n\
	\n\
#GST\n\
float32 rms	#Total RMS standard deviation of ranges inputs to the navigation solution\n\
float32 smd1	#Standard deviation1 (meters) of semi-major axis of error ellipse\n\
float32 smd2	#Standard deviation2 (meters) of semi-major axis of error ellipse\n\
float32 smo	#Orientation Orientation of semi-major axis of error ellipse (true north degrees)\n\
float32 laed	#Standard deviation (meters) of latitude error\n\
float32 loed	#Standard deviation (meters) of longitude error\n\
float32 aled	#Standard deviation (meters) of Altitude error\n\
\n\
#GSA\n\
int32[] id		#Satellites used in the position solution, a null field occurs if a channel is unused\n\
float32 pdop	#Position Dilution of Precision (PDOP)\n\
float32 vdop	#Vertical Dilution of Precision (VDOP)\n\
\n\
\n\
#VTG\n\
float32 gs	#Ground speed\n\
\n\
#GSV\n\
int32 tn					#Total number of satellites in view\n\
int32 mn				#message_number\n\
int32[] sn				#Satellite number\n\
int32[] elevation	#Elevation in degrees, =0to90\n\
int32[] azimuth		#Azimuth (true) in degrees, =0to359\n\
int32[] snr				#SNR(dB) +30, =99\n\
\n\
#kiuchi special\n\
int32[4] sa1\n\
int32[4] sa2\n\
int32[4] sa3\n\
int32[4] sa4\n\
int32[4] sa5\n\
int32[4] sa6\n\
int32[4] sa7\n\
int32[4] sa8\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.lat);
    stream.next(m.lon);
    stream.next(m.precision);
    stream.next(m.satelites);
    stream.next(m.hdop);
    stream.next(m.alt);
    stream.next(m.geo);
    stream.next(m.lack);
    stream.next(m.rms);
    stream.next(m.smd1);
    stream.next(m.smd2);
    stream.next(m.smo);
    stream.next(m.laed);
    stream.next(m.loed);
    stream.next(m.aled);
    stream.next(m.id);
    stream.next(m.pdop);
    stream.next(m.vdop);
    stream.next(m.gs);
    stream.next(m.tn);
    stream.next(m.mn);
    stream.next(m.sn);
    stream.next(m.elevation);
    stream.next(m.azimuth);
    stream.next(m.snr);
    stream.next(m.sa1);
    stream.next(m.sa2);
    stream.next(m.sa3);
    stream.next(m.sa4);
    stream.next(m.sa5);
    stream.next(m.sa6);
    stream.next(m.sa7);
    stream.next(m.sa8);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GpsGsvGsa_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rwrc13_msgs::GpsGsvGsa_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "precision: ";
    Printer<int32_t>::stream(s, indent + "  ", v.precision);
    s << indent << "satelites: ";
    Printer<int32_t>::stream(s, indent + "  ", v.satelites);
    s << indent << "hdop: ";
    Printer<float>::stream(s, indent + "  ", v.hdop);
    s << indent << "alt: ";
    Printer<double>::stream(s, indent + "  ", v.alt);
    s << indent << "geo: ";
    Printer<double>::stream(s, indent + "  ", v.geo);
    s << indent << "lack: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lack);
    s << indent << "rms: ";
    Printer<float>::stream(s, indent + "  ", v.rms);
    s << indent << "smd1: ";
    Printer<float>::stream(s, indent + "  ", v.smd1);
    s << indent << "smd2: ";
    Printer<float>::stream(s, indent + "  ", v.smd2);
    s << indent << "smo: ";
    Printer<float>::stream(s, indent + "  ", v.smo);
    s << indent << "laed: ";
    Printer<float>::stream(s, indent + "  ", v.laed);
    s << indent << "loed: ";
    Printer<float>::stream(s, indent + "  ", v.loed);
    s << indent << "aled: ";
    Printer<float>::stream(s, indent + "  ", v.aled);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "pdop: ";
    Printer<float>::stream(s, indent + "  ", v.pdop);
    s << indent << "vdop: ";
    Printer<float>::stream(s, indent + "  ", v.vdop);
    s << indent << "gs: ";
    Printer<float>::stream(s, indent + "  ", v.gs);
    s << indent << "tn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tn);
    s << indent << "mn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mn);
    s << indent << "sn[]" << std::endl;
    for (size_t i = 0; i < v.sn.size(); ++i)
    {
      s << indent << "  sn[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sn[i]);
    }
    s << indent << "elevation[]" << std::endl;
    for (size_t i = 0; i < v.elevation.size(); ++i)
    {
      s << indent << "  elevation[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.elevation[i]);
    }
    s << indent << "azimuth[]" << std::endl;
    for (size_t i = 0; i < v.azimuth.size(); ++i)
    {
      s << indent << "  azimuth[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.azimuth[i]);
    }
    s << indent << "snr[]" << std::endl;
    for (size_t i = 0; i < v.snr.size(); ++i)
    {
      s << indent << "  snr[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.snr[i]);
    }
    s << indent << "sa1[]" << std::endl;
    for (size_t i = 0; i < v.sa1.size(); ++i)
    {
      s << indent << "  sa1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa1[i]);
    }
    s << indent << "sa2[]" << std::endl;
    for (size_t i = 0; i < v.sa2.size(); ++i)
    {
      s << indent << "  sa2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa2[i]);
    }
    s << indent << "sa3[]" << std::endl;
    for (size_t i = 0; i < v.sa3.size(); ++i)
    {
      s << indent << "  sa3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa3[i]);
    }
    s << indent << "sa4[]" << std::endl;
    for (size_t i = 0; i < v.sa4.size(); ++i)
    {
      s << indent << "  sa4[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa4[i]);
    }
    s << indent << "sa5[]" << std::endl;
    for (size_t i = 0; i < v.sa5.size(); ++i)
    {
      s << indent << "  sa5[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa5[i]);
    }
    s << indent << "sa6[]" << std::endl;
    for (size_t i = 0; i < v.sa6.size(); ++i)
    {
      s << indent << "  sa6[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa6[i]);
    }
    s << indent << "sa7[]" << std::endl;
    for (size_t i = 0; i < v.sa7.size(); ++i)
    {
      s << indent << "  sa7[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa7[i]);
    }
    s << indent << "sa8[]" << std::endl;
    for (size_t i = 0; i < v.sa8.size(); ++i)
    {
      s << indent << "  sa8[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sa8[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RWRC13_MSGS_MESSAGE_GPSGSVGSA_H

