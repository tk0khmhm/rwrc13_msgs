/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/rwrc13_msgs/msg/MultiDataGrid.msg */
#ifndef RWRC13_MSGS_MESSAGE_MULTIDATAGRID_H
#define RWRC13_MSGS_MESSAGE_MULTIDATAGRID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "nav_msgs/MapMetaData.h"
#include "rwrc13_msgs/MultiDataCell.h"

namespace rwrc13_msgs
{
template <class ContainerAllocator>
struct MultiDataGrid_ {
  typedef MultiDataGrid_<ContainerAllocator> Type;

  MultiDataGrid_()
  : header()
  , info()
  , cells()
  {
  }

  MultiDataGrid_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , info(_alloc)
  , cells(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::nav_msgs::MapMetaData_<ContainerAllocator>  _info_type;
   ::nav_msgs::MapMetaData_<ContainerAllocator>  info;

  typedef std::vector< ::rwrc13_msgs::MultiDataCell_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rwrc13_msgs::MultiDataCell_<ContainerAllocator> >::other >  _cells_type;
  std::vector< ::rwrc13_msgs::MultiDataCell_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rwrc13_msgs::MultiDataCell_<ContainerAllocator> >::other >  cells;

  enum { LETHAL = 100 };
  enum { FREE = 0 };

  typedef boost::shared_ptr< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator>  const> ConstPtr;
}; // struct MultiDataGrid
typedef  ::rwrc13_msgs::MultiDataGrid_<std::allocator<void> > MultiDataGrid;

typedef boost::shared_ptr< ::rwrc13_msgs::MultiDataGrid> MultiDataGridPtr;
typedef boost::shared_ptr< ::rwrc13_msgs::MultiDataGrid const> MultiDataGridConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rwrc13_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "064fc70e7b4979c05e80ebe41593818c";
  }

  static const char* value(const  ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x064fc70e7b4979c0ULL;
  static const uint64_t static_value2 = 0x5e80ebe41593818cULL;
};

template<class ContainerAllocator>
struct DataType< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rwrc13_msgs/MultiDataGrid";
  }

  static const char* value(const  ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 LETHAL=100\n\
uint8 FREE=0\n\
\n\
Header header\n\
nav_msgs/MapMetaData info\n\
MultiDataCell[] cells\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nav_msgs/MapMetaData\n\
# This hold basic information about the characterists of the OccupancyGrid\n\
\n\
# The time at which the map was loaded\n\
time map_load_time\n\
# The map resolution [m/cell]\n\
float32 resolution\n\
# Map width [cells]\n\
uint32 width\n\
# Map height [cells]\n\
uint32 height\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: rwrc13_msgs/MultiDataCell\n\
CellBase base\n\
#geometry_msgs/Point32[] points\n\
float32 mean_height\n\
float32 mean_intensity\n\
\n\
================================================================================\n\
MSG: rwrc13_msgs/CellBase\n\
Header header\n\
float32 cell_width\n\
float32 cell_height\n\
geometry_msgs/Point32 position\n\
geometry_msgs/Point32[] points\n\
float32[] intensity\n\
int8 cost\n\
string label\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.info);
    stream.next(m.cells);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MultiDataGrid_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rwrc13_msgs::MultiDataGrid_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "info: ";
s << std::endl;
    Printer< ::nav_msgs::MapMetaData_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rwrc13_msgs::MultiDataCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RWRC13_MSGS_MESSAGE_MULTIDATAGRID_H

