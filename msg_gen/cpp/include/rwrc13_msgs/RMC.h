/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/rwrc13_msgs/msg/RMC.msg */
#ifndef RWRC13_MSGS_MESSAGE_RMC_H
#define RWRC13_MSGS_MESSAGE_RMC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace rwrc13_msgs
{
template <class ContainerAllocator>
struct RMC_ {
  typedef RMC_<ContainerAllocator> Type;

  RMC_()
  : header()
  , time(0.0)
  , status()
  , lat(0.0)
  , lat_ori()
  , lon(0.0)
  , lon_ori()
  , gbv(0.0)
  , ori(0.0)
  , day(0.0)
  , dog(0.0)
  , dog_ori(0.0)
  , mode()
  {
  }

  RMC_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , time(0.0)
  , status(_alloc)
  , lat(0.0)
  , lat_ori(_alloc)
  , lon(0.0)
  , lon_ori(_alloc)
  , gbv(0.0)
  , ori(0.0)
  , day(0.0)
  , dog(0.0)
  , dog_ori(0.0)
  , mode(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _time_type;
  double time;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  typedef double _lat_type;
  double lat;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lat_ori_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  lat_ori;

  typedef double _lon_type;
  double lon;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lon_ori_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  lon_ori;

  typedef double _gbv_type;
  double gbv;

  typedef double _ori_type;
  double ori;

  typedef double _day_type;
  double day;

  typedef double _dog_type;
  double dog;

  typedef double _dog_ori_type;
  double dog_ori;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mode;


  typedef boost::shared_ptr< ::rwrc13_msgs::RMC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rwrc13_msgs::RMC_<ContainerAllocator>  const> ConstPtr;
}; // struct RMC
typedef  ::rwrc13_msgs::RMC_<std::allocator<void> > RMC;

typedef boost::shared_ptr< ::rwrc13_msgs::RMC> RMCPtr;
typedef boost::shared_ptr< ::rwrc13_msgs::RMC const> RMCConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rwrc13_msgs::RMC_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rwrc13_msgs::RMC_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rwrc13_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rwrc13_msgs::RMC_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rwrc13_msgs::RMC_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rwrc13_msgs::RMC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a9e256df7cf4dd559bdfdb23a66919a9";
  }

  static const char* value(const  ::rwrc13_msgs::RMC_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa9e256df7cf4dd55ULL;
  static const uint64_t static_value2 = 0x9bdfdb23a66919a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rwrc13_msgs::RMC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rwrc13_msgs/RMC";
  }

  static const char* value(const  ::rwrc13_msgs::RMC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rwrc13_msgs::RMC_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#RMC\n\
float64 time	\n\
string status	\n\
float64 lat #ido\n\
string lat_ori# North or South	\n\
float64 lon #keido\n\
string lon_ori#East or Western\n\
float64 gbv	#ground based velocity(taniha notto) taichi sokudo	\n\
float64 ori 	#ori	\n\
float64 day	#day 	\n\
float64 dog #declinaton of geomagnetic\n\
float64 dog_ori#orientation of dog\n\
string mode #A=tandoku sokui B=DGPS N=nothing	\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rwrc13_msgs::RMC_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rwrc13_msgs::RMC_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rwrc13_msgs::RMC_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rwrc13_msgs::RMC_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.time);
    stream.next(m.status);
    stream.next(m.lat);
    stream.next(m.lat_ori);
    stream.next(m.lon);
    stream.next(m.lon_ori);
    stream.next(m.gbv);
    stream.next(m.ori);
    stream.next(m.day);
    stream.next(m.dog);
    stream.next(m.dog_ori);
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RMC_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rwrc13_msgs::RMC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rwrc13_msgs::RMC_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lat_ori: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lat_ori);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lon_ori: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lon_ori);
    s << indent << "gbv: ";
    Printer<double>::stream(s, indent + "  ", v.gbv);
    s << indent << "ori: ";
    Printer<double>::stream(s, indent + "  ", v.ori);
    s << indent << "day: ";
    Printer<double>::stream(s, indent + "  ", v.day);
    s << indent << "dog: ";
    Printer<double>::stream(s, indent + "  ", v.dog);
    s << indent << "dog_ori: ";
    Printer<double>::stream(s, indent + "  ", v.dog_ori);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RWRC13_MSGS_MESSAGE_RMC_H

